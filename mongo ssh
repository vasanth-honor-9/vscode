const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const { Client } = require('ssh2');
const { MongoClient, ObjectId } = require('mongodb');

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

let mongoClient = null;
let sshConnection = null;
let activeDb = null;
let activeCollection = null;

app.get('/', (req, res) => {
  res.send(`
    <style>
      .container { display: flex; gap: 20px; padding: 20px; }
      .form-box { flex: 1; }
      .result-box { flex: 1; }
      textarea { width: 100%; height: 400px; }
    </style>
    <div class="container">
      <div class="form-box">
        <form method="POST" action="/connect">
          <h3>SSH & MongoDB Connection</h3>
          SSH Host: <input name="sshHost" required><br>
          SSH Port: <input name="sshPort" value="22"><br>
          SSH User: <input name="sshUser" required><br>
          PEM Path: <input name="sshKeyPath" required><br><br>

          Mongo Host (inside SSH): <input name="mongoHost" required><br>
          Mongo Port: <input name="mongoPort" value="27017"><br>
          DB Name: <input name="dbName" required><br>
          Collection: <input name="collection" required><br>
          Mongo User: <input name="mongoUser" required><br>
          Mongo Pass: <input name="mongoPass" required><br><br>

          <button type="submit">Connect</button>
        </form>
        <hr>
        <form method="POST" action="/query">
          <h3>Query by Document ID</h3>
          ID: <input name="docId" required>
          <button type="submit">Get Result</button>
        </form>
      </div>
      <div class="result-box">
        <h3>Query Result</h3>
        <textarea readonly>${req.query.result || ''}</textarea>
      </div>
    </div>
  `);
});

app.post('/connect', (req, res) => {
  const {
    sshHost, sshPort, sshUser, sshKeyPath,
    mongoHost, mongoPort, dbName, mongoUser, mongoPass, collection
  } = req.body;

  if (sshConnection || mongoClient) {
    return res.redirect('/?result=' + encodeURIComponent('Already connected.'));
  }

  const ssh = new Client();

  ssh.on('ready', () => {
    console.log('SSH connected');

    ssh.forwardOut('127.0.0.1', 12345, mongoHost, parseInt(mongoPort), (err, stream) => {
      if (err) {
        return res.redirect('/?result=' + encodeURIComponent('SSH tunnel error: ' + err.message));
      }

      const uri = `mongodb://${mongoUser}:${encodeURIComponent(mongoPass)}@localhost:${mongoPort}/${dbName}?authSource=admin`;

      mongoClient = new MongoClient(uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        socketFactory: () => stream
      });

      mongoClient.connect((err) => {
        if (err) {
          ssh.end();
          mongoClient = null;
          return res.redirect('/?result=' + encodeURIComponent('MongoDB connection failed: ' + err.message));
        }

        sshConnection = ssh;
        activeDb = mongoClient.db(dbName);
        activeCollection = activeDb.collection(collection);

        console.log('Connected to MongoDB via SSH');
        res.redirect('/?result=' + encodeURIComponent('Connection established! You can now query.'));
      });
    });
  }).connect({
    host: sshHost,
    port: parseInt(sshPort),
    username: sshUser,
    privateKey: fs.readFileSync(sshKeyPath)
  });
});

app.post('/query', async (req, res) => {
  if (!activeCollection) {
    return res.redirect('/?result=' + encodeURIComponent('Not connected. Please connect first.'));
  }

  const { docId } = req.body;

  try {
    const document = await activeCollection.findOne({ _id: new ObjectId(docId) });
    const result = document ? JSON.stringify(document, null, 2) : 'Document not found';
    res.redirect('/?result=' + encodeURIComponent(result));
  } catch (error) {
    res.redirect('/?result=' + encodeURIComponent('Query error: ' + error.message));
  }
});

process.on('SIGINT', async () => {
  console.log('Closing connections...');
  if (mongoClient) await mongoClient.close();
  if (sshConnection) sshConnection.end();
  process.exit();
});

app.listen(3000, () => console.log('App running at http://localhost:3000'));
